/* ------------------------------------------------------------ */
/* perfcurtest2: Brandl Wolfgang                                 */
/* Bundesrechenzentrum,    Vienna. 2017-10-11                   */
/* ------------------------------------------------------------ */
#include <stdio.h>
#include <fcntl.h>
#include <stdarg.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sqlca.h>
#include <string.h>
#include <time.h>
#include <sys/time.h>

#include <sql.h>
#include <sqlutil.h>
#include <sqlenv.h>
#include <db2ApiDf.h>

EXEC SQL BEGIN DECLARE SECTION;
    char dbase [17];
    char user [17];
    char password [17];
    char qualifier [17];
    char result[2];
    sqlint32  iWSID;
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA;
extern int  DB2_call(char * , unsigned short , unsigned short , unsigned short , unsigned short , void * , const char * );
extern int  printtree();

#define sqlacall(tp,st,i,o,p) DB2_call(sqlca.sqlstate,tp,st,i,o,p,sqla_program_id);


/*********************************************************************************************/
/*********************************************************************************************/
int help_do ()
{
  printf("Usage: perfcurtest2 -d<database name> [-u<user> -p<password>] [ -q<qualifier>] \n\n");
  return EXIT_FAILURE;
}

/******************************************************************
* Main 
*******************************************************************/
int main(int argc, char *argv[])
{
  int           i;
  int           bsize;
  int           iCount;
  char        * cInit;
  int           ret;
  int           count;
  time_t        t;
  struct tm     tm;

  memset (dbase,0x00,sizeof(dbase));
  memset (qualifier,0x00,sizeof(qualifier));
  for (iCount = 1; iCount < argc; iCount++) {
    switch (*(argv[iCount]+1)) {
      case '?':
      case 'h':
      case 'H': help_do(); break;
      case 'd':
      case 'D': strcpy (dbase,argv[iCount]+2); break;
      case 'u':
      case 'U': strcpy (user,argv[iCount]+2); break;
      case 'p':
      case 'P': strcpy (password,argv[iCount]+2); break;
      case 'q':
      case 'Q': strcpy (qualifier,argv[iCount]+2); break;
      default:
        help_do();
        return EXIT_FAILURE;
    }
  }
  if (strlen(dbase) == 0 ){
    help_do();
    return EXIT_FAILURE;
  }
  if(strlen(qualifier) > 0){
    EXEC SQL SET CURRENT PACKAGESET = :qualifier;
  }

  putenv ("DB2CODEPAGE=1208"); 

  if(strlen(user) > 0 && strlen(password) >0){
    EXEC SQL CONNECT TO :dbase USER :user USING :password;
  } else {
    EXEC SQL CONNECT TO :dbase;
  }
  if (sqlca.sqlcode) {
    printf("Main: CONNECT: %d\n", sqlca.sqlcode);
    free (cInit);
    return EXIT_FAILURE;
  } else {
    printf("Main: CONNECT: %d\n", sqlca.sqlcode);
  }


  /***********************************/
  /* Print date and environment */
  t = time(NULL);
  tm = *localtime(&t);
  printf("***************** perfcurtest2 ***********************************\n");
  printf("*****************************************************************\n");
  printf("Start: %d-%d-%d %d:%d:%d\n", tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, tm.tm_hour, tm.tm_min, tm.tm_sec);
  printf("*****************************************************************\n");
  printf("*****************************************************************\n");

  /***********************************/

  EXEC SQL DECLARE OUTERRO_CURSOR CURSOR FOR SELECT IBMREQD FROM SYSIBM.SYSDUMMY1 FOR READ ONLY;
  if (sqlca.sqlcode){
    printf("Main: Declare Cursor OUTERRO_CURSOR: %d\n", sqlca.sqlcode);
  }
  i = 0;
  for (;;){
    if (i >= 100000) break;
    EXEC SQL OPEN OUTERRO_CURSOR;
    if (sqlca.sqlcode){
      printf("Main: Open Cursor OUTERRO_CURSOR: %d\n", sqlca.sqlcode);
      break;
    }
    EXEC SQL CLOSE OUTERRO_CURSOR;
    if (sqlca.sqlcode){
      printf("Main: Close Cursor OUTERRO_CURSOR: %d\n", sqlca.sqlcode);
      break;
    }
    i++;
  }

  EXEC SQL COMMIT;
  if (sqlca.sqlcode != 0) {
    printf("Main: COMMIT: %d\n", sqlca.sqlcode);
    return EXIT_FAILURE;
  }

  EXEC SQL CONNECT RESET;
  if (sqlca.sqlcode != 0) {
    printf("Main: CONNECT RESET: %d\n", sqlca.sqlcode);
    return EXIT_FAILURE;
  }

  printtree();
  /***********************************/
  /* Print date and environment */
  t = time(NULL);
  tm = *localtime(&t);
  printf("**************** perfcurtest2 ************************************\n");
  printf("*****************************************************************\n");
  printf("End: %d-%d-%d %d:%d:%d\n", tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, tm.tm_hour, tm.tm_min, tm.tm_sec);
  printf("*****************************************************************\n");
  printf("*****************************************************************\n");
  return EXIT_SUCCESS;
} /* main */

/* --- eof perfcurtest2.sqc ----------------------------------------- */
